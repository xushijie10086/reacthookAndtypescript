{"ast":null,"code":"// // tslint:disable:no-console\n// // In production, we register a service worker to serve assets from local cache.\n// // This lets the app load faster on subsequent visits in production, and gives\n// // it offline capabilities. However, it also means that developers (and users)\n// // will only see deployed updates on the 'N+1' visit to a page, since previously\n// // cached resources are updated in the background.\n// // To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// // This link also includes instructions on opting out of this behavior.\n// const isLocalhost = Boolean(\n//   window.location.hostname === 'localhost' ||\n//     // [::1] is the IPv6 localhost address.\n//     window.location.hostname === '[::1]' ||\n//     // 127.0.0.1/8 is considered localhost for IPv4.\n//     window.location.hostname.match(\n//       /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n//     )\n// );\n// export default function register() {\n//   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//     // The URL constructor is available in all browsers that support SW.\n//     const publicUrl = new URL(\n//       process.env.PUBLIC_URL!,\n//       window.location.toString()\n//     );\n//     if (publicUrl.origin !== window.location.origin) {\n//       // Our service worker won't work if PUBLIC_URL is on a different origin\n//       // from what our page is served on. This might happen if a CDN is used to\n//       // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n//       return;\n//     }\n//     window.addEventListener('load', () => {\n//       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n//       if (isLocalhost) {\n//         // This is running on localhost. Lets check if a service worker still exists or not.\n//         checkValidServiceWorker(swUrl);\n//         // Add some additional logging to localhost, pointing developers to the\n//         // service worker/PWA documentation.\n//         navigator.serviceWorker.ready.then(() => {\n//           console.log(\n//             'This web app is being served cache-first by a service ' +\n//               'worker. To learn more, visit https://goo.gl/SC7cgQ'\n//           );\n//         });\n//       } else {\n//         // Is not local host. Just register service worker\n//         registerValidSW(swUrl);\n//       }\n//     });\n//   }\n// }\n// function registerValidSW(swUrl: string) {\n//   navigator.serviceWorker\n//     .register(swUrl)\n//     .then(registration => {\n//       registration.onupdatefound = () => {\n//         const installingWorker = registration.installing;\n//         if (installingWorker) {\n//           installingWorker.onstatechange = () => {\n//             if (installingWorker.state === 'installed') {\n//               if (navigator.serviceWorker.controller) {\n//                 // At this point, the old content will have been purged and\n//                 // the fresh content will have been added to the cache.\n//                 // It's the perfect time to display a 'New content is\n//                 // available; please refresh.' message in your web app.\n//                 console.log('New content is available; please refresh.');\n//               } else {\n//                 // At this point, everything has been precached.\n//                 // It's the perfect time to display a\n//                 // 'Content is cached for offline use.' message.\n//                 console.log('Content is cached for offline use.');\n//               }\n//             }\n//           };\n//         }\n//       };\n//     })\n//     .catch(error => {\n//       console.error('Error during service worker registration:', error);\n//     });\n// }\n// function checkValidServiceWorker(swUrl: string) {\n//   // Check if the service worker can be found. If it can't reload the page.\n//   fetch(swUrl)\n//     .then(response => {\n//       // Ensure service worker exists, and that we really are getting a JS file.\n//       if (\n//         response.status === 404 ||\n//         response.headers.get('content-type')!.indexOf('javascript') === -1\n//       ) {\n//         // No service worker found. Probably a different app. Reload the page.\n//         navigator.serviceWorker.ready.then(registration => {\n//           registration.unregister().then(() => {\n//             window.location.reload();\n//           });\n//         });\n//       } else {\n//         // Service worker found. Proceed as normal.\n//         registerValidSW(swUrl);\n//       }\n//     })\n//     .catch(() => {\n//       console.log(\n//         'No internet connection found. App is running in offline mode.'\n//       );\n//     });\n// }\n// export function unregister() {\n//   if ('serviceWorker' in navigator) {\n//     navigator.serviceWorker.ready.then(registration => {\n//       registration.unregister();\n//     });\n//   }\n// }","map":{"version":3,"sources":["/Users/xushijie/Desktop/Project/react-hooks-typescript-example/src/registerServiceWorker.ts"],"names":[],"mappingssourcesContent":["// // tslint:disable:no-console\n// // In production, we register a service worker to serve assets from local cache.\n\n// // This lets the app load faster on subsequent visits in production, and gives\n// // it offline capabilities. However, it also means that developers (and users)\n// // will only see deployed updates on the 'N+1' visit to a page, since previously\n// // cached resources are updated in the background.\n\n// // To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// // This link also includes instructions on opting out of this behavior.\n\n// const isLocalhost = Boolean(\n//   window.location.hostname === 'localhost' ||\n//     // [::1] is the IPv6 localhost address.\n//     window.location.hostname === '[::1]' ||\n//     // 127.0.0.1/8 is considered localhost for IPv4.\n//     window.location.hostname.match(\n//       /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n//     )\n// );\n\n// export default function register() {\n//   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//     // The URL constructor is available in all browsers that support SW.\n//     const publicUrl = new URL(\n//       process.env.PUBLIC_URL!,\n//       window.location.toString()\n//     );\n//     if (publicUrl.origin !== window.location.origin) {\n//       // Our service worker won't work if PUBLIC_URL is on a different origin\n//       // from what our page is served on. This might happen if a CDN is used to\n//       // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n//       return;\n//     }\n\n//     window.addEventListener('load', () => {\n//       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n//       if (isLocalhost) {\n//         // This is running on localhost. Lets check if a service worker still exists or not.\n//         checkValidServiceWorker(swUrl);\n\n//         // Add some additional logging to localhost, pointing developers to the\n//         // service worker/PWA documentation.\n//         navigator.serviceWorker.ready.then(() => {\n//           console.log(\n//             'This web app is being served cache-first by a service ' +\n//               'worker. To learn more, visit https://goo.gl/SC7cgQ'\n//           );\n//         });\n//       } else {\n//         // Is not local host. Just register service worker\n//         registerValidSW(swUrl);\n//       }\n//     });\n//   }\n// }\n\n// function registerValidSW(swUrl: string) {\n//   navigator.serviceWorker\n//     .register(swUrl)\n//     .then(registration => {\n//       registration.onupdatefound = () => {\n//         const installingWorker = registration.installing;\n//         if (installingWorker) {\n//           installingWorker.onstatechange = () => {\n//             if (installingWorker.state === 'installed') {\n//               if (navigator.serviceWorker.controller) {\n//                 // At this point, the old content will have been purged and\n//                 // the fresh content will have been added to the cache.\n//                 // It's the perfect time to display a 'New content is\n//                 // available; please refresh.' message in your web app.\n//                 console.log('New content is available; please refresh.');\n//               } else {\n//                 // At this point, everything has been precached.\n//                 // It's the perfect time to display a\n//                 // 'Content is cached for offline use.' message.\n//                 console.log('Content is cached for offline use.');\n//               }\n//             }\n//           };\n//         }\n//       };\n//     })\n//     .catch(error => {\n//       console.error('Error during service worker registration:', error);\n//     });\n// }\n\n// function checkValidServiceWorker(swUrl: string) {\n//   // Check if the service worker can be found. If it can't reload the page.\n//   fetch(swUrl)\n//     .then(response => {\n//       // Ensure service worker exists, and that we really are getting a JS file.\n//       if (\n//         response.status === 404 ||\n//         response.headers.get('content-type')!.indexOf('javascript') === -1\n//       ) {\n//         // No service worker found. Probably a different app. Reload the page.\n//         navigator.serviceWorker.ready.then(registration => {\n//           registration.unregister().then(() => {\n//             window.location.reload();\n//           });\n//         });\n//       } else {\n//         // Service worker found. Proceed as normal.\n//         registerValidSW(swUrl);\n//       }\n//     })\n//     .catch(() => {\n//       console.log(\n//         'No internet connection found. App is running in offline mode.'\n//       );\n//     });\n// }\n\n// export function unregister() {\n//   if ('serviceWorker' in navigator) {\n//     navigator.serviceWorker.ready.then(registration => {\n//       registration.unregister();\n//     });\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}