{"ast":null,"code":"import _slicedToArray from \"/Users/xushijie/Desktop/Project/react-hooks-typescript-example/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/xushijie/Desktop/Project/react-hooks-typescript-example/src/CounterReducer.tsx\";\nimport * as React from \"react\";\nvar initialState = {\n  count: 0\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case \"reset\":\n      return initialState;\n\n    case \"increment\":\n      return {\n        count: state.count + 1\n      };\n\n    case \"decrement\":\n      return {\n        count: state.count - 1\n      };\n\n    default:\n      return state;\n  }\n};\n\nvar CounterReducer = function CounterReducer() {\n  var _React$useReducer = React.useReducer(reducer, initialState),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Count: \", state.count), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return dispatch({\n        type: \"reset\"\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Reset\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return dispatch({\n        type: \"increment\"\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"+\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return dispatch({\n        type: \"decrement\"\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"-\"));\n};\n\nexport default CounterReducer;","map":{"version":3,"sources":["/Users/xushijie/Desktop/Project/react-hooks-typescript-example/src/CounterReducer.tsx"],"names":["React","initialState","count","reducer","state","action","type","CounterReducer","useReducer","dispatch"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAYA,IAAMC,YAAmB,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA5B;;AAEA,IAAMC,OAAqC,GAAG,SAAxCA,OAAwC,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAC/D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,OAAL;AACE,aAAOL,YAAP;;AACF,SAAK,WAAL;AACE,aAAO;AAAEC,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAAvB,OAAP;;AACF,SAAK,WAAL;AACE,aAAO;AAAEA,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAAvB,OAAP;;AACF;AACE,aAAOE,KAAP;AARJ;AAUD,CAXD;;AAaA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA,0BACDP,KAAK,CAACQ,UAAN,CACxBL,OADwB,EAExBF,YAFwB,CADC;AAAA;AAAA,MACpBG,KADoB;AAAA,MACbK,QADa;;AAM3B,SACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAWL,KAAK,CAACF,KAAjB,CADF,EAEE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMO,QAAQ,CAAC;AAAEH,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAd;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,EAGE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMG,QAAQ,CAAC;AAAEH,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAd;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHF,EAIE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMG,QAAQ,CAAC;AAAEH,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAd;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJF,CADF;AAQD,CAdD;;AAgBA,eAAeC,cAAf","sourcesContent":["import * as React from \"react\";\n\ninterface State {\n  count: number;\n}\n\ntype Actions = \"reset\" | \"increment\" | \"decrement\";\n\ninterface Action {\n  type: Actions;\n}\n\nconst initialState: State = { count: 0 };\n\nconst reducer: React.Reducer<State, Action> = (state, action) => {\n  switch (action.type) {\n    case \"reset\":\n      return initialState;\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n};\n\nconst CounterReducer = () => {\n  const [state, dispatch] = React.useReducer<React.Reducer<State, Action>>(\n    reducer,\n    initialState\n  );\n\n  return (\n    <>\n      <p>Count: {state.count}</p>\n      <button onClick={() => dispatch({ type: \"reset\" })}>Reset</button>\n      <button onClick={() => dispatch({ type: \"increment\" })}>+</button>\n      <button onClick={() => dispatch({ type: \"decrement\" })}>-</button>\n    </>\n  );\n};\n\nexport default CounterReducer;\n"]},"metadata":{},"sourceType":"module"}