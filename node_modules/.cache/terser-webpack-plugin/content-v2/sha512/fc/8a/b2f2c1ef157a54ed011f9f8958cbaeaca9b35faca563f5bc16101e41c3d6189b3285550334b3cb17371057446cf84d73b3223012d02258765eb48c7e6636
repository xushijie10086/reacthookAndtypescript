{"map":"{\"version\":3,\"sources\":[\"/Users/xushijie/Desktop/Project/react-hooks-typescript-example/src/app/App.tsx\",\"/Users/xushijie/Desktop/Project/react-hooks-typescript-example/src/components/counter/Counter.tsx\",\"/Users/xushijie/Desktop/Project/react-hooks-typescript-example/src/components/counter-title/CounterTitle.tsx\",\"/Users/xushijie/Desktop/Project/react-hooks-typescript-example/src/registerServiceWorker.ts\",\"/Users/xushijie/Desktop/Project/react-hooks-typescript-example/src/index.tsx\"],\"names\":[\"EXAMPLES\",\"Counter\",\"_React$useState\",\"React\",\"_React$useState2\",\"Object\",\"slicedToArray\",\"count\",\"setCount\",\"react\",\"className\",\"onClick\",\"CounterTitle\",\"document\",\"title\",\"concat\",\"EXAMPLE_NAMES\",\"keys\",\"App\",\"example\",\"setExample\",\"ExampleComponent\",\"exampleButtons\",\"map\",\"name\",\"key\",\"isLocalhost\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"registerValidSW\",\"swUrl\",\"navigator\",\"serviceWorker\",\"register\",\"then\",\"registration\",\"onupdatefound\",\"installingWorker\",\"installing\",\"onstatechange\",\"state\",\"controller\",\"console\",\"log\",\"catch\",\"error\",\"ReactDOM\",\"src_app_App\",\"getElementById\",\"URL\",\"process\",\"toString\",\"origin\",\"addEventListener\",\"fetch\",\"response\",\"status\",\"headers\",\"get\",\"indexOf\",\"ready\",\"unregister\",\"reload\",\"checkValidServiceWorker\",\"registerServiceWorker\"],\"mappings\":\"oMAMMA,SAAW,CACfC,QCLc,WAAM,IAAAC,EACMC,EAAAA,SAAe,GADrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACbK,EADaH,EAAA,GACNI,EADMJ,EAAA,GAGpB,OACEK,EAAA,cAAA,MAAA,CAAKC,UAAU,WACbD,EAAA,cAAA,IAAA,KAAA,4BAASF,EAAT,WACAE,EAAA,cAAA,SAAA,CAAQE,QAAS,WAAA,OAAMH,EAASD,EAAQ,KAAxC,kBDAJK,aENmB,WAAM,IAAAV,EACCC,EAAAA,SAAe,GADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClBK,EADkBH,EAAA,GACXI,EADWJ,EAAA,GAgBzB,OAbAD,EAAAA,UACE,WAKE,OAHAU,SAASC,MAAT,4BAAAC,OAAyBR,EAAzB,WAGO,WACLM,SAASC,MAAQ,+BAGrB,CAACP,IAIDE,EAAA,cAAA,MAAA,CAAKC,UAAU,WACbD,EAAA,cAAA,IAAA,KAAA,4BAASF,EAAT,WACAE,EAAA,cAAA,SAAA,CAAQE,QAAS,WAAA,OAAMH,EAASD,EAAQ,KAAxC,oBFRAS,EAAgBX,OAAOY,KAAKjB,GAgCnBkB,EA9BH,WAAM,IAAAhB,EAEcC,EAAAA,SAAyB,WAFvCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAETiB,EAFSf,EAAA,GAEAgB,EAFAhB,EAAA,GAKViB,EAAmBrB,EAASmB,GAG5BG,EAAiBN,EAAcO,IAAI,SAAAC,GAAI,OAC3Cf,EAAA,cAAA,SAAA,CACEgB,IAAKD,EACLb,QAAS,WAAA,OAAMS,EAAWI,IAC1Bd,UAAWc,IAASL,EAAU,SAAW,IAExCK,KAIL,OACEf,EAAA,cAAAA,EAAA,SAAA,KACEA,EAAA,cAAA,MAAA,CAAKC,UAAU,aACbD,EAAA,cAAA,MAAA,CAAKC,UAAU,OACZY,EACDb,EAAA,cAACY,EAAD,UG3BJK,SAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAyCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WAClCD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAOvBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KC/EjEC,EAAAA,OACExC,EAAA,cAACyC,EAAD,MACArC,SAASsC,eAAe,SDaX,WACb,GAA6C,kBAAmBjB,UAAW,CAMzE,GAJkB,IAAIkB,IACpBC,GACAzB,OAAOC,SAASyB,YAEJC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAlB,OAAMsC,GAAN,sBAEP3B,GAmDV,SAAiCO,GAE/BwB,MAAMxB,GACHI,KAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACwD,IAAjED,EAASE,QAAQC,IAAI,gBAAiBC,QAAQ,cAG9C5B,UAAUC,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7BT,OAAOC,SAASoC,aAKpBjC,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEAvEAoB,CAAwBjC,GAIxBC,UAAUC,cAAc4B,MAAM1B,KAAK,WACjCQ,QAAQC,IACN,+GAMJd,EAAgBC,MC1CxBkC\",\"sourcesContent\":[\"import * as React from \\\"react\\\";\\nimport \\\"./App.css\\\";\\nimport Counter from \\\"../components/counter/Counter\\\";\\nimport CounterTitle from \\\"../components/counter-title/CounterTitle\\\";\\n\\n// An object of all possible example components that can be rendered\\nconst EXAMPLES = {\\n  Counter,\\n  CounterTitle\\n};\\n\\ntype Examples = keyof typeof EXAMPLES;\\n\\nconst EXAMPLE_NAMES = Object.keys(EXAMPLES) as Examples[];\\n\\nconst App = () => {\\n\\n  const [example, setExample] = React.useState<Examples>(\\\"Counter\\\");\\n\\n\\n  const ExampleComponent = EXAMPLES[example];\\n\\n\\n  const exampleButtons = EXAMPLE_NAMES.map(name => (\\n    <button\\n      key={name}\\n      onClick={() => setExample(name)}\\n      className={name === example ? \\\"active\\\" : \\\"\\\"}\\n    >\\n      {name} \\n    </button>\\n  ));\\n\\n  return (\\n    <>\\n      <div className=\\\"container\\\">\\n        <div className=\\\"app\\\">\\n          {exampleButtons}\\n          <ExampleComponent />\\n        </div>\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport default App;\\n\",\"import * as React from \\\"react\\\";\\n\\nconst Counter = () => {\\n  const [count, setCount] = React.useState(0);\\n\\n  return (\\n    <div className=\\\"counter\\\">\\n      <p>你点击了 {count} 次</p>\\n      <button onClick={() => setCount(count + 1)}>点我</button>\\n    </div>\\n  );\\n};\\n\\nexport default Counter;\\n\",\"import * as React from \\\"react\\\";\\n\\nconst CounterTitle = () => {\\n  const [count, setCount] = React.useState(0);\\n\\n  React.useEffect(\\n    () => {\\n      // Update the document title to the current count\\n      document.title = `您点击了 ${count} 次`;\\n\\n      // Cleanup the effect so that the document title is properly restored\\n      return () => {\\n        document.title = \\\"React + TypeScript + Hooks\\\";\\n      };\\n    },\\n    [count]\\n  );\\n\\n  return (\\n    <div className=\\\"counter\\\">\\n      <p>您点击了 {count} 次</p>\\n      <button onClick={() => setCount(count + 1)}>点我</button>\\n    </div>\\n  );\\n};\\n\\nexport default CounterTitle;\\n\",\"// tslint:disable:no-console\\n// In production, we register a service worker to serve assets from local cache.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on the 'N+1' visit to a page, since previously\\n// cached resources are updated in the background.\\n\\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\\n// This link also includes instructions on opting out of this behavior.\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport default function register() {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(\\n      process.env.PUBLIC_URL!,\\n      window.location.toString()\\n    );\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Lets check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\\n          );\\n        });\\n      } else {\\n        // Is not local host. Just register service worker\\n        registerValidSW(swUrl);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl: string) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker) {\\n          installingWorker.onstatechange = () => {\\n            if (installingWorker.state === 'installed') {\\n              if (navigator.serviceWorker.controller) {\\n                // At this point, the old content will have been purged and\\n                // the fresh content will have been added to the cache.\\n                // It's the perfect time to display a 'New content is\\n                // available; please refresh.' message in your web app.\\n                console.log('New content is available; please refresh.');\\n              } else {\\n                // At this point, everything has been precached.\\n                // It's the perfect time to display a\\n                // 'Content is cached for offline use.' message.\\n                console.log('Content is cached for offline use.');\\n              }\\n            }\\n          };\\n        }\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl: string) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      if (\\n        response.status === 404 ||\\n        response.headers.get('content-type')!.indexOf('javascript') === -1\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import * as React from 'react';\\nimport * as ReactDOM from 'react-dom';\\nimport App from './app/App';\\nimport './index.css';\\nimport registerServiceWorker from './registerServiceWorker';\\n\\nReactDOM.render(\\n  <App />,\\n  document.getElementById('root') as HTMLElement\\n);\\nregisterServiceWorker();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,,function(e,n,t){e.exports=t(12)},,,,,,function(e,n,t){},function(e,n,t){},function(e,n,t){\"use strict\";t.r(n);var o=t(0),r=t(3),c=t(1),i=(t(10),{Counter:function(){var e=o.useState(0),n=Object(c.a)(e,2),t=n[0],r=n[1];return o.createElement(\"div\",{className:\"counter\"},o.createElement(\"p\",null,\"\\u4f60\\u70b9\\u51fb\\u4e86 \",t,\" \\u6b21\"),o.createElement(\"button\",{onClick:function(){return r(t+1)}},\"\\u70b9\\u6211\"))},CounterTitle:function(){var e=o.useState(0),n=Object(c.a)(e,2),t=n[0],r=n[1];return o.useEffect(function(){return document.title=\"\\u60a8\\u70b9\\u51fb\\u4e86 \".concat(t,\" \\u6b21\"),function(){document.title=\"React + TypeScript + Hooks\"}},[t]),o.createElement(\"div\",{className:\"counter\"},o.createElement(\"p\",null,\"\\u60a8\\u70b9\\u51fb\\u4e86 \",t,\" \\u6b21\"),o.createElement(\"button\",{onClick:function(){return r(t+1)}},\"\\u70b9\\u6211\"))}}),a=Object.keys(i),l=function(){var e=o.useState(\"Counter\"),n=Object(c.a)(e,2),t=n[0],r=n[1],l=i[t],u=a.map(function(e){return o.createElement(\"button\",{key:e,onClick:function(){return r(e)},className:e===t?\"active\":\"\"},e)});return o.createElement(o.Fragment,null,o.createElement(\"div\",{className:\"container\"},o.createElement(\"div\",{className:\"app\"},u,o.createElement(l,null))))},u=(t(11),Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)));function s(e){navigator.serviceWorker.register(e).then(function(e){e.onupdatefound=function(){var n=e.installing;n&&(n.onstatechange=function(){\"installed\"===n.state&&(navigator.serviceWorker.controller?console.log(\"New content is available; please refresh.\"):console.log(\"Content is cached for offline use.\"))})}}).catch(function(e){console.error(\"Error during service worker registration:\",e)})}r.render(o.createElement(l,null),document.getElementById(\"root\")),function(){if(\"serviceWorker\"in navigator){if(new URL(\"\",window.location.toString()).origin!==window.location.origin)return;window.addEventListener(\"load\",function(){var e=\"\".concat(\"\",\"/service-worker.js\");u?(function(e){fetch(e).then(function(n){404===n.status||-1===n.headers.get(\"content-type\").indexOf(\"javascript\")?navigator.serviceWorker.ready.then(function(e){e.unregister().then(function(){window.location.reload()})}):s(e)}).catch(function(){console.log(\"No internet connection found. App is running in offline mode.\")})}(e),navigator.serviceWorker.ready.then(function(){console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://goo.gl/SC7cgQ\")})):s(e)})}}()}],[[4,1,2]]]);","extractedComments":[]}